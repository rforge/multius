rnem <- function (initial, formula, theta, k = 5000, q, b = 0.25, sym = FALSE, saveActions = FALSE) {
  # QUICK HELP
  # initial = initial network
  # formula = vector of coefitients
  # k = number of iterations
  # theta = vector of coeficientss
  # q = verjetnost, s katero vzpostavimo povezavo ali (1-b) prekinemo povezavo
  # b = izmed koliko zgornjih izbiramo?
  # ce je sym=TRUE, potem so vse povezave in nepovezave nemudoma simetrizirane
  # saveActions = whether to save individual link changes
  networks <- list("final" = initial,
                   "initial" = initial,
                   "actions" = ifelse(saveActions == TRUE, yes = list(matrix(NA, nrow = k, ncol = 3)), no = NA)[[1]])

  for (i in 1:k) {
    actor <- sample(nrow(initial), size = 1)
    X <- sapply(X = 1:length(formula), FUN = function(i){formula[[i]](initial, actor = actor)})
    X[is.nan(X)] <- 0
    probabilities <- X %*% theta
    urej <- cbind(1:nrow(initial), order(probabilities), probabilities)[-actor,]
    if (sample(c(0, 1), prob = c(1 - q, q), 1) == 1) {
      alter <- sample(urej[which(urej[, 3] >= quantile(urej[, 3], probs = 1 - b)), 1], 1)
      initial[actor, alter] <- 1

      if (saveActions == TRUE) networks[["actions"]][i, c(1, 2)] <- c(actor, alter)
      if (sym == TRUE) initial[alter, actor] <- 1
    }
    if (sample(c(0, 1), prob = c(1 - q, q), 1) == 0) {
      alter <- sample(urej[which(urej[, 3] <= quantile(urej[, 3], probs = b)), 1], 1)
      initial[actor, alter] <- 0

      if (saveActions == TRUE) networks[["actions"]][i, c(1, 3)] <- c(actor, alter)
      if (sym == TRUE) initial[alter, actor] <- 0
    }
  }
  networks[["final"]] <- initial
  return(networks)
}
