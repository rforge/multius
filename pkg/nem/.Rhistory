# izberi eno povezavo
npov <- sample(which(initial.net == 1), size = 1)
# zamenjaj edge
new.network[pov] <- 1
new.network[npov] <- 0
# izracunaj statistike
s.rand <- summary(initial.net ~ triadcensus)
s.new <- summary(new.network ~ triadcensus)
nova.teoreticna <- sum((s.new[allowed.terms] - teoreticna.porazdelitev[allowed.terms])**2)
stara.teoreticna <- sum((s.rand[allowed.terms] - teoreticna.porazdelitev[allowed.terms])**2)
change.ratio.vec[i] <- change.ratio <- nova.teoreticna/stara.teoreticna
if (is.nan(change.ratio) == FALSE) {
if (change.ratio < 1) initial.net <- new.network
else new.network <- initial.net
} else new.network <- initial.net
}
return(list("new.network" = new.network, "CR" = change.ratio.vec))
}
# generate initial and ideal network
cohesiveBM <- rbind(c("com", "nul"), c("nul", "com"))
initial <- gen.network.LE(BM = cohesiveBM, LE = 0, n = 12, size = rep(0.5, 2))
random <- gen.network.LE(BM = cohesiveBM, LE = 1, n = 12, size = rep(0.5, 2))
# generate network with the RL algorithm
generatedNetwork <- RL(ideal.net = ideal.net, initial.net = random.net, triads = "all", k = 1000)
RL <- function(ideal.net, initial.net, triads = "forb", k = 100, custom.triads = NULL){
n <- nrow(ideal.net)
teoreticna.porazdelitev <- ergm::summary_formula(ideal.net ~ triadcensus)
if (triads=="forb") allowed.terms <- names(teoreticna.porazdelitev)[teoreticna.porazdelitev == 0]
if (triads=="allow") allowed.terms <- names(teoreticna.porazdelitev)[teoreticna.porazdelitev != 0]
if (triads=="all") allowed.terms <- names(teoreticna.porazdelitev)
if (triads=="cust") allowed.terms <- names(teoreticna.porazdelitev)[custom.triads]
change.ratio.vec <- NULL
new.network <- initial.net
for (i in 1:k){
# izberi eno ne-povezavo
pov <- sample(which(initial.net == 0)[is.element(which(initial.net == 0), which(diag(1, nrow = n) == 1)) == FALSE], size = 1)
# izberi eno povezavo
npov <- sample(which(initial.net == 1), size = 1)
# zamenjaj edge
new.network[pov] <- 1
new.network[npov] <- 0
# izracunaj statistike
s.rand <- summary(initial.net ~ triadcensus)
s.new <- summary(new.network ~ triadcensus)
nova.teoreticna <- sum((s.new[allowed.terms] - teoreticna.porazdelitev[allowed.terms])**2)
stara.teoreticna <- sum((s.rand[allowed.terms] - teoreticna.porazdelitev[allowed.terms])**2)
change.ratio.vec[i] <- change.ratio <- nova.teoreticna/stara.teoreticna
if (is.nan(change.ratio) == FALSE) {
if (change.ratio < 1) initial.net <- new.network
else new.network <- initial.net
} else new.network <- initial.net
}
return(list("new.network" = new.network, "CR" = change.ratio.vec))
}
# generate initial and ideal network
cohesiveBM <- rbind(c("com", "nul"), c("nul", "com"))
initial <- gen.network.LE(BM = cohesiveBM, LE = 0, n = 12, size = rep(0.5, 2))
random <- gen.network.LE(BM = cohesiveBM, LE = 1, n = 12, size = rep(0.5, 2))
# generate network with the RL algorithm
generatedNetwork <- RL(ideal.net = ideal.net, initial.net = random.net, triads = "all", k = 1000)
library(nem)
# generate initial and ideal network
cohesiveBM <- rbind(c("com", "nul"), c("nul", "com"))
initial <- gen.network.LE(BM = cohesiveBM, LE = 0, n = 12, size = rep(0.5, 2))
random <- gen.network.LE(BM = cohesiveBM, LE = 1, n = 12, size = rep(0.5, 2))
# generate network with the RL algorithm
generatedNetwork <- RL(ideal.net = ideal.net, initial.net = random.net, triads = "all", k = 1000)
# evaluate the obtained network
res <- blockmodeling::optRandomParC(M = generatedNetwork[[1]], k = 2, approaches = "bin", blocks = c("null", "com"), rep = 1000, nCores = 0)
plot(res)
library(nem)
library(nem)
network = omrezje
nSim = 10
groups = c(3:4)
bmType = list("cohes" = cohes, "hier" = hier, "hierb" = hierb, "trans" = trans, "transb" = transb, "free" = freeBM)
nCores = 5
network = omrezje
nSim = 10
groups = c(3:4)
bmType = list("cohes" = cohes, "hierb" = hierb, "trans" = trans, "transb" = transb, "free" = freeBM)
nCores = 5
library(nem)
network = omrezje
nSim = 10
groups = c(3:4)
bmType = list("cohes" = cohes, "hierb" = hierb, "trans" = trans, "transb" = transb, "free" = freeBM)
nCores = 5
network <- matrix(sample(c(0,1), size = 12*12), nrow = 12, ncol = 12)
network <- matrix(sample(c(0,1), size = 12*12, TRUE), nrow = 12, ncol = 12)
#--- empiricni CF
empCF <- matrix(NA, nrow = length(groups), ncol = length(bmType))
empCF
stevec <- 1
for (i in groups){
for (j in 1:length(bmType)){
blocks <- bmType[[j]](i)
empCF[stevec, j] <- err(optRandomParC(M = network,
blockTypeWeights = blockTypeWeights,
k = i,
rep = rep,
approach = "bin",
blocks = blocks,
nCores = nCores))
}
stevec <- stevec+1
}
bmType
cohes
cohes <- function(nbl){
B.cohes <- array(NA, dim = c(1, 1, nbl, nbl))
B.cohes[1,1,,] <- matrix("null", nrow = nbl, ncol = nbl)
diag(B.cohes[1,1,,]) <- "com"
return(B.cohes)
}
network = omrezje
nSim = 10
groups = c(3:4)
bmType = list("cohes" = cohes, "hier" = hier, "hierb" = hierb, "trans" = trans, "transb" = transb, "free" = freeBM)
nCores = 5
#--- empiricni CF
empCF <- matrix(NA, nrow = length(groups), ncol = length(bmType))
stevec <- 1
for (i in groups){
for (j in 1:length(bmType)){
blocks <- bmType[[j]](i)
empCF[stevec, j] <- err(optRandomParC(M = network,
blockTypeWeights = blockTypeWeights,
k = i,
rep = rep,
approach = "bin",
blocks = blocks,
nCores = nCores))
}
stevec <- stevec+1
}
blockTypeWeights = 1
#--- empiricni CF
empCF <- matrix(NA, nrow = length(groups), ncol = length(bmType))
stevec <- 1
for (i in groups){
for (j in 1:length(bmType)){
blocks <- bmType[[j]](i)
empCF[stevec, j] <- err(optRandomParC(M = network,
blockTypeWeights = blockTypeWeights,
k = i,
rep = rep,
approach = "bin",
blocks = blocks,
nCores = nCores))
}
stevec <- stevec+1
}
empCF
network
network <- matrix(sample(c(0,1), size = 24*24, TRUE), nrow = 24, ncol = 24)
#--- empiricni CF
empCF <- matrix(NA, nrow = length(groups), ncol = length(bmType))
stevec <- 1
for (i in groups){
for (j in 1:length(bmType)){
blocks <- bmType[[j]](i)
empCF[stevec, j] <- err(optRandomParC(M = network,
blockTypeWeights = blockTypeWeights,
k = i,
rep = rep,
approach = "bin",
blocks = blocks,
nCores = nCores))
}
stevec <- stevec+1
}
stevec
empCF
network
blockTypeWeights
i
rep
rep <- 200
#--- empiricni CF
empCF <- matrix(NA, nrow = length(groups), ncol = length(bmType))
stevec <- 1
for (i in groups){
for (j in 1:length(bmType)){
blocks <- bmType[[j]](i)
empCF[stevec, j] <- err(optRandomParC(M = network,
blockTypeWeights = blockTypeWeights,
k = i,
rep = rep,
approach = "bin",
blocks = blocks,
nCores = nCores))
}
stevec <- stevec+1
}
empCF
rownames(empCF) <- groups
empCF
if (is.null(names(bmType)) == FALSE) colnames(empCF) <- names(bmType)
empCF
partitions <- matrix(NA, nrow = nrow(network), ncol = length(groups))
colnames(partitions) <- groups
partitions
partitions <- array(data = NA, dim = c(length(groups), length(bmType), nSim))
partitions
partitions <- array(data = NA, dim = c(nrow(network), length(groups), length(bmType)))
partitions
partitions[[1,,]]
partitions[[,1,]]
partitions[[,1,,]]
partitions[[,1,1]]
partitions <- array(data = NA, dim = c(nrow(network), length(groups), length(bmType)))
partitions[[,1,1]]
partitions[[,,1]]
partitions[[,,1]]
partitions[,,1]
bmType
groups
partitions[,,1]
partitions <- array(data = NA, dim = c(nrow(network), length(groups), length(bmType)),
dimnames = list("units" = 1:nrow(network), "groups" = groups, "bmType" = names(bmType)))
partitions
partitions[,,1]
partitions <- array(data = NA, dim = c(nrow(network), length(groups), length(bmType)),
dimnames = list("units" = 1:nrow(network), "groups" = groups, "bmType" = names(bmType)))
resBM <- optRandomParC(M = network,
blockTypeWeights = blockTypeWeights,
k = i,
rep = rep,
approach = "bin",
blocks = blocks,
nCores = nCores)
partitions[,i,j]
i <- 3
j<-1
partitions[,i,j]
partitions[,stevec,j]
stevec <- 1
partitions[,stevec,j]
clu(resBM)
rep
rep <- 10
partitions <- array(data = NA, dim = c(nrow(network), length(groups), length(bmType)),
dimnames = list("units" = 1:nrow(network), "groups" = groups, "bmType" = names(bmType)))
stevec <- 1
for (i in groups){
for (j in 1:length(bmType)){
blocks <- bmType[[j]](i)
resBM <- optRandomParC(M = network,
blockTypeWeights = blockTypeWeights,
k = i,
rep = rep,
approach = "bin",
blocks = blocks,
nCores = nCores)
empCF[stevec, j] <- err(resBM)
partitions[,stevec,j] <- clu(resBM)
}
stevec <- stevec+1
}
partitions
get.RF <- function(network,
nSim = 10,
nCores = 0,
groups = groups,
bmType = list("cohes" = cohes,"ccp" = ccp),
symmetrize = FALSE,
blockTypeWeights = 1,
rep = 200){
#--- empiricni CF
empCF <- matrix(NA, nrow = length(groups), ncol = length(bmType))
rownames(empCF) <- groups
if (is.null(names(bmType)) == FALSE) colnames(empCF) <- names(bmType)
partitions <- array(data = NA, dim = c(nrow(network), length(groups), length(bmType)),
dimnames = list("units" = 1:nrow(network), "groups" = groups, "bmType" = names(bmType)))
stevec <- 1
for (i in groups){
for (j in 1:length(bmType)){
blocks <- bmType[[j]](i)
resBM <- optRandomParC(M = network,
blockTypeWeights = blockTypeWeights,
k = i,
rep = rep,
approach = "bin",
blocks = blocks,
nCores = nCores)
empCF[stevec, j] <- err(resBM)
partitions[,stevec,j] <- clu(resBM)
}
stevec <- stevec+1
}
#--- rndRF
rndRF <- array(data = NA, dim = c(length(groups), length(bmType), nSim))
stevec <- 1
for (i in groups){
for (k in 1:nSim){
randomized <- randomize(network)
for (j in 1:length(bmType)){
blocks <- bmType[[j]](i)
rndRF[stevec, j, k] <- err(optRandomParC(M = randomized,
blockTypeWeights = blockTypeWeights,
k = i,
rep = rep,
approach = "bin",
blocks = blocks,
nCores = nCores))
}
}
stevec <- stevec + 1
}
#--- RCF
RF <- 1 - empCF / apply(rndRF, c(1, 2), mean)
rownames(RF) <- groups
if (is.null(names(bmType)) == FALSE) colnames(RF) <- names(bmType)
return(list(network = network, partitions = partitions, empCF = empCF, rndCF = rndRF, RF = RF))
}
library(nem)
library(nem)
normalize.rsphere <- function (X,  r= 1) {
r.sphere <- X * 1/sqrt(rowSums(X^2)) * r
return(r.sphere)
}
normalize.rsphere(c(1,2,5,4,6))
r.sphere <- X * 1/sqrt(sum(X^2)) * r
normalize.rsphere <- function (X,  r= 1) {
r.sphere <- X * 1/sqrt(sum(X^2)) * r
return(r.sphere)
}
normalize.rsphere(c(1,2,5,4,6))
sum(normalize.rsphere(c(1,2,5,4,6)))
sum(normalize.rsphere(c(1,2,5,4,6))**2)
thetaAdd[,,i]
normalize.rsphere <- function (X,  r= 1) {
r.sphere <- X * 1/sqrt(rowSums(X^2)) * r
return(r.sphere)
}
library("blockmodeling")
library("doRNG")
library("doParallel")
IB <- function(IM1, IM2){
try(IM1 <- IM1[, , ,], silent = TRUE)
try(IM2 <- IM2[, , ,], silent = TRUE)
if(is.element(el = FALSE, set = c(dim(IM1) == dim(IM2)))) warning("The image matrices must have the same dimensions!")
IM2[IM2 == "null"] <- "nul"
IM1[IM1 == "null"] <- "nul"
k <- nrow(IM1)
all.perms <- permn(1:k)
diags <- sapply(1:length(all.perms), function(x) {
sum((IM1[all.perms[[x]], all.perms[[x]]] != IM2) * (IM2 != "dnc"))
})
return(list("IB" = min(diags), "order" = all.perms[[which.min(diags)]]))
}
nem <- function(initial, formula, theta,  k = 5000, q, b = 0.25){
# QUICK HELP
# initial = initial network
# formula = vector of coefitients
# k = number of iterations
# theta = vector of coeficientss
# q = verjetnost, s katero vzpostavimo povezavo ali (1-b) prekinemo povezavo
# b = izmed koliko zgornjih izbiramo?
for (i in 1:k){
actor <- sample(nrow(initial), size = 1)
l.friends <- which(initial[actor,] == 1)
nonfriends <- which(initial[actor,] == 0)
X <- sapply(X = 1:length(formula), FUN = function(i){formula[[i]](initial, actor = actor)})
##MC# Ali je to pravilno normalizirano?
X <- X/matrix(colSums(abs(X)), nrow = nrow(X), ncol = ncol(X), byrow = TRUE)
X[is.nan(X)] <- 0
probabilities <- X %*% theta
urej  <- cbind(1:nrow(initial), order(probabilities), probabilities)[-actor,]
if(sample(c(0,1), prob = c(1-q, q), 1) == 1){
if (length(nonfriends) > 0){
initial[actor, sample(urej[which(urej[,3] >= quantile(urej[,3], probs = 1-b)), 1], 1)] <- 1
}
}
if(sample(c(0,1), prob = c(1-q, q), 1) == 0){
if (length(l.friends) > 0){
initial[actor, sample(urej[which(urej[,3] <= quantile(urej[,3], probs = b)), 1], 1)] <- 0
}
}
}
return(initial)
}
##MC# Pustimo tole verzijo, a ne?
assortativity<-function (network, actor){
diff <- abs(sum(network[, actor]) - colSums(network))^2
all <- 1 - diff/4
all <- ifelse(all<0,0,all)
return(all)
}
transitivityCount <- function(network, actor){
network <- network + t(network)
network[network > 0] <- 1
counts <- NULL
for (i in 1:nrow(network)){
friends <-  cbind(network[i, ],
network[, i],
network[actor, ],
network[, actor])
counts[i] <- sum(rowSums(friends) == 4)
}
if (sum(counts) != 0) counts <- counts
return(counts)
}
mutualityCount <- function(network, actor){
asyminties <- as.numeric(network[, actor] + (network[actor, ]*-1) == 1)
return(asyminties)
}
OSPCount <- function (network, actor) {
counts <- NULL
for (i in 1:nrow(network)) {
friends <- cbind(network[actor, ], network[i, ])
counts[i] <- sum(rowSums(friends) == 2)
}
counts[actor] <- 0
return(counts)
}
inDegreeShare <- function(network, actor = NULL){
return(colSums(network)/nrow(network))
}
OTPCount <- function (network, actor) {
counts <- NULL
for (i in 1:nrow(network)) {
friends <- cbind(network[actor, ], network[, i])
counts[i] <- sum(rowSums(friends) == 2)
}
return(counts)
}
normalize.rsphere <- function (X,  r= 1) {
r.sphere <- X * 1/sqrt(rowSums(X^2)) * r
return(r.sphere)
}
seq.sum <- function(start, n.out, power){
sequence <- rep(NA, n.out)
sequence[1] <- start
for (i in 2:n.out) sequence[i] <- sequence[i - 1]*power
return(sequence)
}
##########################################################################################################################
########################## # PARAMETRI
n.slucajnih <- 30          # stevilo slucajnih omrezij
rep.opt <- 200             # stevilo iteracij v algoritmu optRandPar
q.tran <- 5/9              # parameter v transition
start.iter <- 100          # pri katerem stevilu iteracij shranim prvi rezultat
formula <- list(mutualityCount, inDegreeShare, assortativity, OTPCount, OSPCount)
##########################################################################################################################
theteOrig <- t(data.frame("238" = c(0.37, 0.61, 0.35, 0.0, 0.61),
"136" = c(0.41, -0.18, 0.37, 0.74, -0.34),
"228" = c(0.59, 0.12, 0.24, 0.76, -0.08),
"224" = c(0.45, 0.10, 0.77, 0.44, -0.08),
"153" = c(0.84, -0.14, 0.36, 0.32, -0.21),
"286" = c(0.52, 0.26, 0.33, 0.72, 0.16),
"226" = c(0.65, -0.04, 0.11, 0.71, 0.23),
"259" = c(0.51, 0.57, 0.60, 0.25, 0.02),
"163" = c(0.44, 0.15, 0.49, 0.41, 0.61),
"172" = c(0.28, 0.80, 0.17, -0.01, 0.51)))
colnames(theteOrig) <- c("mutuality", "popularity", "assortativity",  "OTPtransitivity",  "OSPtransitivity")
thetaAdd <- array(dim = c(nrow(theteOrig), ncol(theteOrig), 11))
thetaAdd[,,1] <- theteOrig
# ker so povsod pozitivne vrednosti, pristevam samo pozitivne (in 0 za vsak slucaj)
##MC# So vrednosti pravilno generirane in normalizirane?
vrednosti <- seq(from = 0, to = 1, length.out = 10)
i <- 1
i <- 2
thetaAdd[,,i] <- theteOrig
thetaAdd[,3,i] <- vrednosti[i-1]
thetaAdd[,,i]
normalize.rsphere(thetaAdd[,,i])
normalize.rsphere(thetaAdd[,,i])**2
rowSums(normalize.rsphere(thetaAdd[,,i])**2)
sum(normalize.rsphere(c(1,2,5,4,6))**2)
X <- c(1,2,5,4,6)
dim(X)
is.vector(X)
normalize.rsphere <- function (X,  r= 1) {
if(is.vector(X)) r.sphere <- X * 1/sqrt(sum(X^2)) * r else r.sphere <- X * 1/sqrt(rowSums(X^2)) * r
return(r.sphere)
}
X <- c(1,2,5,4,6)
sum(normalize.rsphere(c(1,2,5,4,6))**2)
theteOrig <- t(data.frame("238" = c(0.37, 0.61, 0.35, 0.0, 0.61),
"136" = c(0.41, -0.18, 0.37, 0.74, -0.34),
"228" = c(0.59, 0.12, 0.24, 0.76, -0.08),
"224" = c(0.45, 0.10, 0.77, 0.44, -0.08),
"153" = c(0.84, -0.14, 0.36, 0.32, -0.21),
"286" = c(0.52, 0.26, 0.33, 0.72, 0.16),
"226" = c(0.65, -0.04, 0.11, 0.71, 0.23),
"259" = c(0.51, 0.57, 0.60, 0.25, 0.02),
"163" = c(0.44, 0.15, 0.49, 0.41, 0.61),
"172" = c(0.28, 0.80, 0.17, -0.01, 0.51)))
theteOrig
sum(normalize.rsphere(theteOrig)**2)
rowSums(normalize.rsphere(theteOrig)**2)
rowSums(normalize.rsphere(theteOrig, r = 2)**2)
rowSums(normalize.rsphere(theteOrig, r = 0.5)**2)
rowSums(normalize.rsphere(theteOrig, r = 1)**2)
rowSums(normalize.rsphere(theteOrig, r = 5)**2)
rowSums(normalize.rsphere(theteOrig, r = 10)**2)
# generate initial and ideal network
cohesiveBM <- rbind(c("com", "nul"), c("nul", "com"))
ideal <- gen.network.LE(BM = cohesiveBM, LE = 0, n = 12, size = rep(0.5, 2))
random <- gen.network.LE(BM = cohesiveBM, LE = 1, n = 12, size = rep(0.5, 2))
# generate network with the RL algorithm
generatedNetwork <- RL(ideal.net = ideal, initial.net = random, triads = "all", k = 1000)
# evaluate the obtained network
res <- blockmodeling::optRandomParC(M = generatedNetwork[[1]], k = 2, approaches = "bin", blocks = c("null", "com"), rep = 1000, nCores = 0)
plot(res)
plot(res)
library(nem)
library(nem)
library(nem)
source('C:/Users/marss/Dropbox/FDV/multiUS/nem/nem/R/ccp.R', echo=TRUE)
