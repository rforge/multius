library(multiUS)
?testCCbase
library(multiUS)
?testCCbase
library(multiUS)
?testCCbase
setwd("C:\\Users\\Marjan\\Documents\\FDV\\Podjetja\\Preliminarne_Analize")
library(grDevices)
library(blockmodeling)
library(myPhD)
library(bipartite)
library(igraph)
data("CompanyA")
zdruzenaOmrezja <- list()
zdruzenaOmrezja[["verzijaA_1"]] <- CompanyA$omrezja$nasveti_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1] + CompanyA$omrezja$ucitelji_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1]
zdruzenaOmrezja[["verzijaA_2"]] <- CompanyA$omrezja$nasveti_06[CompanyA$lokacija$lokacija_06 == 1, CompanyA$lokacija$lokacija_06 == 1] + CompanyA$omrezja$ucitelji_06[CompanyA$lokacija$lokacija_06 == 1, CompanyA$lokacija$lokacija_06 == 1]
zdruzenaOmrezja[["verzijaA_3"]] <- CompanyA$omrezja$nasveti_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1] + CompanyA$omrezja$ucitelji_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1]
zdruzenaOmrezja[["verzijaB_1"]] <- CompanyA$omrezja$ideje_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1] + CompanyA$omrezja$testiranje_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1]
zdruzenaOmrezja[["verzijaB_2"]] <- CompanyA$omrezja$ideje_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1] + CompanyA$omrezja$testiranje_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1]
zdruzenaOmrezja[["verzijaC_1"]] <- CompanyA$omrezja$nasveti_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1] +
CompanyA$omrezja$ideje_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1] +
CompanyA$omrezja$ucitelji_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1] +
CompanyA$omrezja$testiranje_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1]
zdruzenaOmrezja[["verzijaC_2"]] <- CompanyA$omrezja$nasveti_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1] +
CompanyA$omrezja$ideje_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1] +
CompanyA$omrezja$ucitelji_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1] +
CompanyA$omrezja$testiranje_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1]
png(filename = "grafi_BM.png", width = 1200*4.2, height = 400*4.2*2.5, res = 450)
par(mfrow = c(3, 3), mar = rep(2, 4))
# omrezje 1
omr1 <- CompanyA$omrezja$nasveti_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1]
staz_omr1 <- CompanyA$staz$staz_04[CompanyA$lokacija$lokacija_04 == 1]
bu_omr1 <- CompanyA$oddelek$oddelek_04[CompanyA$lokacija$lokacija_04 == 1] + 2
set.seed(2)
barve1 <- clu(readRDS(paste0("..\\Data\\BM_zdruzenaOmrezja\\", names(zdruzenaOmrezja)[1])))
barve2 <- clu(readRDS(paste0("..\\Data\\BM_zdruzenaOmrezja\\", names(zdruzenaOmrezja)[2])))
barve3 <- clu(readRDS(paste0("..\\Data\\BM_zdruzenaOmrezja\\", names(zdruzenaOmrezja)[3])))
plot.igraph(graph_from_adjacency_matrix(omr1),
vertex.label = NA,
main = "advice, December 2004",
vertex.shape = ifelse(bu_omr1 %in% 6, yes = "square", no = "circle"),
edge.arrow.width = 1,  edge.arrow.size = 0.5,
vertex.size = sqrt(prop.table(staz_omr1))*50,
edge.color = "black",
edge.curved = TRUE, vertex.color = barve1, loops = FALSE)
omr2 <- CompanyA$omrezja$nasveti_06[CompanyA$lokacija$lokacija_06 == 1, CompanyA$lokacija$lokacija_06 == 1]
staz_omr2 <- CompanyA$staz$staz_06[CompanyA$lokacija$lokacija_06 == 1]
bu_omr2 <- CompanyA$oddelek$oddelek_06[CompanyA$lokacija$lokacija_06 == 1] + 2
set.seed(2)
plot.igraph(graph_from_adjacency_matrix(omr2), vertex.label = NA, main = "advice, July 2006",
edge.arrow.width = 1,  edge.arrow.size = 0.5,
vertex.size = sqrt(prop.table(staz_omr2))*50,
vertex.shape = ifelse(bu_omr2 %in% 6, yes = "square", no = "circle"),
edge.color = "black",
edge.curved = TRUE, vertex.color = barve2, loops = FALSE)
omr3 <- CompanyA$omrezja$nasveti_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1]
staz_omr3 <- CompanyA$staz$staz_07[CompanyA$lokacija$lokacija_07 == 1]
bu_omr3 <- CompanyA$oddelek$oddelek_07[CompanyA$lokacija$lokacija_07 == 1] + 2
set.seed(34)
plot.igraph(graph_from_adjacency_matrix(omr3), vertex.label = NA, main = "advice, April 2007",
edge.arrow.width = 1,  edge.arrow.size = 0.5,
vertex.size = sqrt(prop.table(staz_omr3))*50,
vertex.shape = ifelse(bu_omr3 %in% 6, yes = "square", no = "circle"),
edge.color = "black",
edge.curved = TRUE, vertex.color = barve3, loops = FALSE)
# omrezje 2
omr1 <- CompanyA$omrezja$ucitelji_04[CompanyA$lokacija$lokacija_04 == 1, CompanyA$lokacija$lokacija_04 == 1]
staz_omr1 <- CompanyA$staz$staz_04[CompanyA$lokacija$lokacija_04 == 1]
bu_omr1 <- CompanyA$oddelek$oddelek_04[CompanyA$lokacija$lokacija_04 == 1] + 2
set.seed(2)
plot.igraph(graph_from_adjacency_matrix(omr1), vertex.label = NA, main = "learning, December 2004",
edge.arrow.width = 1,  edge.arrow.size = 0.5,
vertex.size = sqrt(prop.table(staz_omr1))*50,
vertex.shape = ifelse(bu_omr1 %in% 6, yes = "square", no = "circle"),
edge.color = "black",
edge.curved = TRUE, vertex.color = barve1, loops = FALSE)
omr2 <- CompanyA$omrezja$ucitelji_06[CompanyA$lokacija$lokacija_06 == 1, CompanyA$lokacija$lokacija_06 == 1]
staz_omr2 <- CompanyA$staz$staz_06[CompanyA$lokacija$lokacija_06 == 1]
bu_omr2 <- CompanyA$oddelek$oddelek_06[CompanyA$lokacija$lokacija_06 == 1] + 2
set.seed(2)
plot.igraph(graph_from_adjacency_matrix(omr2), vertex.label = NA, main = "learning, July 2006",
edge.arrow.width = 1,  edge.arrow.size = 0.5,
vertex.size = sqrt(prop.table(staz_omr2))*50,
vertex.shape = ifelse(bu_omr2 %in% 6, yes = "square", no = "circle"),
edge.color = "black",
edge.curved = TRUE, vertex.color = barve2, loops = FALSE)
omr3 <- CompanyA$omrezja$ucitelji_07[CompanyA$lokacija$lokacija_07 == 1, CompanyA$lokacija$lokacija_07 == 1]
staz_omr3 <- CompanyA$staz$staz_07[CompanyA$lokacija$lokacija_07 == 1]
bu_omr3 <- CompanyA$oddelek$oddelek_07[CompanyA$lokacija$lokacija_07 == 1] + 2
set.seed(34)
plot.igraph(graph_from_adjacency_matrix(omr3), vertex.label = NA, main = "learning, April 2007",
edge.arrow.width = 1,  edge.arrow.size = 0.5,
vertex.size = sqrt(prop.table(staz_omr3))*50,
vertex.shape = ifelse(bu_omr3 %in% 6, yes = "square", no = "circle"),
edge.color = "black",
edge.curved = TRUE, vertex.color = barve3, loops = FALSE)
# zdruzena omrezja
omr1 <- ifelse(zdruzenaOmrezja[["verzijaA_1"]] > 0, yes = 1, no = 0)
staz_omr1 <- CompanyA$staz$staz_04[CompanyA$lokacija$lokacija_04 == 1]
bu_omr1 <- CompanyA$oddelek$oddelek_04[CompanyA$lokacija$lokacija_04 == 1] + 2
set.seed(2)
plot.igraph(graph_from_adjacency_matrix(omr1), vertex.label = NA, main = "knowledge-flow, December 2004\n(advice and learning)",
edge.arrow.width = 1,  edge.arrow.size = 0.5,
vertex.size = sqrt(prop.table(staz_omr1))*50,
vertex.shape = ifelse(bu_omr1 %in% 6, yes = "square", no = "circle"),
edge.color = "black",
edge.curved = TRUE, vertex.color = barve1, loops = FALSE)
omr2 <- ifelse(zdruzenaOmrezja[["verzijaA_2"]] > 0, yes = 1, no = 0)
staz_omr2 <- CompanyA$staz$staz_06[CompanyA$lokacija$lokacija_06 == 1]
bu_omr2 <- CompanyA$oddelek$oddelek_06[CompanyA$lokacija$lokacija_06 == 1] + 2
set.seed(2)
plot.igraph(graph_from_adjacency_matrix(omr2), vertex.label = NA, main = "knowledge-flow, July 2004\n(advice and learning)",
edge.arrow.width = 1,  edge.arrow.size = 0.5,
vertex.size = sqrt(prop.table(staz_omr2))*50,
vertex.shape = ifelse(bu_omr2 %in% 6, yes = "square", no = "circle"),
edge.color = "black",
edge.curved = TRUE, vertex.color = barve2, loops = FALSE)
omr3 <- ifelse(zdruzenaOmrezja[["verzijaA_3"]] > 0, yes = 1, no = 0)
staz_omr3 <- CompanyA$staz$staz_07[CompanyA$lokacija$lokacija_07 == 1]
bu_omr3 <- CompanyA$oddelek$oddelek_07[CompanyA$lokacija$lokacija_07 == 1] + 2
set.seed(34)
plot.igraph(graph_from_adjacency_matrix(omr3), vertex.label = NA, main = "knowledge-flow, April 2007\n(advice and learning)",
edge.arrow.width = 1,  edge.arrow.size = 0.5,
vertex.size = sqrt(prop.table(staz_omr3))*50,
vertex.shape = ifelse(bu_omr3 %in% 6, yes = "square", no = "circle"),
edge.color = "black",
edge.curved = TRUE, vertex.color = barve3, loops = FALSE)
dev.off()
library(MASS)
cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5)])
cancorPlus<-function(x, y, xcenter = TRUE, ycenter = TRUE, useCCApackage=FALSE){
if(useCCApackage){
if(!require(CCA)){
warning("CCA Package is not installed! Function cancor{stats} will be used instead!")
cca<-cancor(x=x,y=y,xcenter=xcenter,ycenter=ycenter)
} else {
if(any(xcenter!=TRUE,ycenter != TRUE)) warning("xcenter and ycenter are ignored when using CCA package")
cca<-cc(X=x,Y=y)
}
} else cca<-cancor(x=x,y=y,xcenter=xcenter,ycenter=ycenter)
n<-dim(x)[1]
p<-dim(cca$xcoef)[1]
q<-dim(cca$ycoef)[1]
tmp<-testCCbase(cor=cca$cor, n=n, p=p, q=q)
res<-c(cca,tmp)
class(res)<-class(cca)
return(res)
}
cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5)])
cancorPlus<-function(x, y, xcenter = TRUE, ycenter = TRUE, useCCApackage=FALSE){
if(useCCApackage){
if(!require(CCA)){
warning("CCA Package is not installed! Function cancor{stats} will be used instead!")
cca<-cancor(x=x,y=y,xcenter=xcenter,ycenter=ycenter)
} else {
if(any(xcenter!=TRUE,ycenter != TRUE)) warning("xcenter and ycenter are ignored when using CCA package")
cca<-cc(X=x,Y=y)
}
} else cca<-cancor(x=x,y=y,xcenter=xcenter,ycenter=ycenter)
n<-dim(x)[1]
p<-dim(cca$xcoef)[1]
q<-dim(cca$ycoef)[1]
tmp<-testCCbase(cor=cca$cor, n=n, p=p, q=q)
res<-c(cca,tmp)
class(res)<-class(cca)
return(res)
}
cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5)], useCCApackage = TRUE)
cancorPlus<-function(x, y, xcenter = TRUE, ycenter = TRUE, useCCApackage=FALSE){
if(useCCApackage){
if(!require(CCA)){
warning("CCA Package is not installed! Function cancor{stats} will be used instead!")
cca<-cancor(x=x,y=y,xcenter=xcenter,ycenter=ycenter)
} else {
if(any(xcenter!=TRUE,ycenter != TRUE)) warning("xcenter and ycenter are ignored when using CCA package")
cca<-cc(X=x,Y=y)
}
} else cca<-cancor(x=x,y=y,xcenter=xcenter,ycenter=ycenter)
n<-dim(x)[1]
p<-dim(cca$xcoef)[1]
q<-dim(cca$ycoef)[1]
tmp<-testCCbase(cor=cca$cor, n=n, p=p, q=q)
res<-c(cca,tmp)
class(res)<-class(cca)
return(res)
}
cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5)], useCCApackage = FALSE)
testCCbase<-function(cor, n, p, q){
ev <- (1 - cor^2)
k <- min(p, q)
m <- n - 3/2 - (p + q)/2
w <- rev(cumprod(rev(ev)))
d1 <- d2 <- f <- vector("numeric", k)
for (i in 1:k) {
s <- sqrt((p^2 * q^2 - 4)/(p^2 + q^2 - 5))
si <- 1/s
d1[i] <- p * q
d2[i] <- m * s - p * q/2 + 1
r <- (1 - w[i]^si)/w[i]^si
f[i] <- r * d2[i]/d1[i]
p <- p - 1
q <- q - 1
}
pv <- pf(f, d1, d2, lower.tail = FALSE)
eig<-cor^2/(1 - cor^2)
eigModel<-cbind(Eigenvalues=eig,"%"=eig/sum(eig)*100,"Cum %"=cumsum(eig/sum(eig))*100,"Cor"=cor,"Sq. Cor"=cor^2)
dmat <- cbind(WilksL = w, F = f, df1 = d1, df2 = d2, p = pv)
rownames(dmat)<-paste(1:k,"to",k)
return(list(sigTest=dmat,eigModel=eigModel))
}
library(multiUS)
?cancorPlus
cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5)])
cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5)])
mtcars
cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5)])
cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5, 6)])
printP <- function(p){
if (p>1) warning("P value have to be between 0 and 1.")
if (p<0) warning("P value have to be between 0 and 1.")
if (p<0.01) return("p < 0.01")
if (p==0.01) return("p = 0.01")
if (p<0.05 & p>0.01) return("p < 0.05")
if (p==0.05) return("p = 0.05")
if (p<0.10 & p>0.05) return("p < 0.10")
if (p==0.10) return("p = 0.10")
else return(paste("p = ", round(p, 2)))
}
printP(-0.1)
printP(1.1)
printP(.1)
printP(.15)
printP(.05)
printP(.054)
printP <- function(p){
if (p>1) warning("P value have to be between 0 and 1.") stop()
if (p<0) warning("P value have to be between 0 and 1.") stop()
if (p<0.01) return("p < 0.01")
if (p==0.01) return("p = 0.01")
if (p<0.05 & p>0.01) return("p < 0.05")
if (p==0.05) return("p = 0.05")
if (p<0.10 & p>0.05) return("p < 0.10")
if (p==0.10) return("p = 0.10")
else return(paste("p = ", round(p, 2)))
}
printP <- function(p){
if ((p>1) | (p<0)) {
if (p<0.01) return("p < 0.01")
if (p==0.01) return("p = 0.01")
if (p<0.05 & p>0.01) return("p < 0.05")
if (p==0.05) return("p = 0.05")
if (p<0.10 & p>0.05) return("p < 0.10")
if (p==0.10) return("p = 0.10")
else return(paste("p = ", round(p, 2)))
} else (warning("P value have to be between 0 and 1."))
}
printP(-0.1)
printP <- function(p){
if ((p<=1) | (p<=0)) {
if (p<0.01) return("p < 0.01")
if (p==0.01) return("p = 0.01")
if (p<0.05 & p>0.01) return("p < 0.05")
if (p==0.05) return("p = 0.05")
if (p<0.10 & p>0.05) return("p < 0.10")
if (p==0.10) return("p = 0.10")
else return(paste("p = ", round(p, 2)))
} else (warning("P value have to be between 0 and 1."))
}
printP(-0.1)
printP <- function(p){
if ((p<=1) & (p<=0)) {
if (p<0.01) return("p < 0.01")
if (p==0.01) return("p = 0.01")
if (p<0.05 & p>0.01) return("p < 0.05")
if (p==0.05) return("p = 0.05")
if (p<0.10 & p>0.05) return("p < 0.10")
if (p==0.10) return("p = 0.10")
else return(paste("p = ", round(p, 2)))
} else (warning("P value have to be between 0 and 1."))
}
printP(-0.1)
printP(p = -0.1)
printP <- function(p){
if ((p<=1) & (p>=0)) {
if (p<0.01) return("p < 0.01")
if (p==0.01) return("p = 0.01")
if (p<0.05 & p>0.01) return("p < 0.05")
if (p==0.05) return("p = 0.05")
if (p<0.10 & p>0.05) return("p < 0.10")
if (p==0.10) return("p = 0.10")
else return(paste("p = ", round(p, 2)))
} else (warning("P value have to be between 0 and 1."))
}
printP(p = -0.1)
printP(p = 0.1)
printP(p = 0.15)
printP(p = 0.05)
printP(p = 0.0)
printP(p = 0.06)
printP <- function(p){
if ((p<=1) & (p>=0)) {
if (p<0.01) return("p < 0.01")
if (p==0.01) return("p = 0.01")
if (p<0.05 & p>0.01) return("p < 0.05")
if (p==0.05) return("p = 0.05")
if (p<0.10 & p>0.05) return("p < 0.10")
if (p==0.10) return("p = 0.10")
else return(paste("p = ", round(p, 2)))
} else (return(warning("P value have to be between 0 and 1.")))
}
printP(p = -0.1)
toLik<-function(x,type="eq",q=1.5,k=5,r=range(x), num=TRUE){
d<-diff(r)
if(type=="eq"){
br<-c(-Inf,r[1]+1:(k-1)*d/k,Inf)
}else if(type=="yes"){
int <- d/sum(q^(c(0:(k-1))))
br<-c(-Inf,r[1]+cumsum(q^(0:(k-2)))*int,Inf)
}else if(type=="no"){
q<-1/q
int <- d/sum(q^(c(0:(k-1))))
br<-c(-Inf,r[1]+cumsum(q^(0:(k-2)))*int,Inf)
}else if(type=="avg"){
q<-1/q
br<-numeric(k+1)
br[1]<- -Inf
br[k+1]<- Inf
if(k%%2==0){
int <- d/sum(2*q^(c(0:(k/2-1))))
br[k/2+1] <- (r[1]+r[2])/2
for (i in c(1:(k/2-1))){
br[k/2+1+i] <- br[k/2+1+i-1]+int*q^(i-1)
br[k/2+1-i] <- br[k/2+1-i+1]-int*q^(i-1)}
} else {
int <- d/sum(1,2*q^(c(1:((k-1)/2))))
center <- (r[1]+r[2])/2
br[k/2+1.5] <- center+int/2
br[k/2+0.5] <- center-int/2
# dodati zaradi robnega pogoja
if (k > 3){
for (i in c(1:((k-3)/2))){
br[k/2 + 1.5 + i] <- br[k/2+1.5 + i - 1]+int*q^i
br[k/2 + 0.5 - i] <- br[k/2+0.5 - i + 1]-int*q^i
}
}
}
}
xd<-cut(x,breaks=br)
if(num) xd<-as.numeric(xd)
return(xd)
}
toLik(rnorm(10))
toLik(rnorm(10), num = FALSE)
x <- rnorm(100)
par(mfrow = c(2, 2))
x <- rnorm(100)
par(mfrow = c(2, 2))
hist(x = toLik(x, type = "eq"))
hist(x = toLik(x, type = "eq"), nclass = 5)
hist(x = toLik(x, type = "eq"), nclass = 5, breaks = 0:5+0.5)
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5)
x <- rnorm(100)
par(mfrow = c(2, 2))
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "yes"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "no"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "avg"), breaks = 0:5+0.5)
x <- rnorm(300)
par(mfrow = c(2, 2))
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "yes"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "no"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "avg"), breaks = 0:5+0.5)
x <- rnorm(300)
par(mfrow = c(2, 2))
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "yes"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "no"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "avg"), breaks = 0:5+0.5)
x <- rnorm(300)
par(mfrow = c(2, 2))
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "yes"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "no"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "avg"), breaks = 0:5+0.5)
x <- rnorm(1000)
par(mfrow = c(2, 2))
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "yes"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "no"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "avg"), breaks = 0:5+0.5)
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5, ylab = "answer", main = "type = 'eq'')
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5, ylab = "answer", main = "type = 'eq'")
x <- rnorm(1000)
par(mfrow = c(2, 2))
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5, ylab = "answer", main = "type = 'eq'")
hist(x = toLik(x, type = "yes"), breaks = 0:5+0.5, ylab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "no"), breaks = 0:5+0.5, ylab = "answer", main = "type = 'no'")
hist(x = toLik(x, type = "avg"), breaks = 0:5+0.5, ylab = "answer", main = "type = 'avg'")
x <- rnorm(1000)
par(mfrow = c(2, 2))
hist(x = toLik(x, type = "eq"), breaks = 0:5+0.5, xlab = "answer", main = "type = 'eq'")
hist(x = toLik(x, type = "yes"), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "no"), breaks = 0:5+0.5, xlab = "answer", main = "type = 'no'")
hist(x = toLik(x, type = "avg"), breaks = 0:5+0.5, xlab = "answer", main = "type = 'avg'")
hist(x = toLik(x, type = "eq", q = 5), breaks = 0:5+0.5, xlab = "answer", main = "type = 'eq'")
hist(x = toLik(x, type = "eq", q = 10), breaks = 0:5+0.5, xlab = "answer", main = "type = 'eq'")
hist(x = toLik(x, type = "eq", q = 1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'eq'")
hist(x = toLik(x, type = "eq", q = 0.1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'eq'")
hist(x = toLik(x, type = "yes", q = 0.1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 2), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 3), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 2), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 1.2), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 1.8), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 0.1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 0.5), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "yes", q = 1.8), breaks = 0:5+0.5, xlab = "answer", main = "type = 'yes'")
hist(x = toLik(x, type = "avg", q = 2), breaks = 0:5+0.5, xlab = "answer", main = "type = 'avg'")
hist(x = toLik(x, type = "avg", q = 1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'avg'")
hist(x = toLik(x, type = "avg", q = 0.1), breaks = 0:5+0.5, xlab = "answer", main = "type = 'avg'")
roxygen2::roxygenise()
library(multiUS)
devtools::build_manual()
install.packages("devtools")
install.packages("devtools")
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
library(blockmodeling)
BoxMTest(X = mtcars[, c(1, 3, 4, 5)], cl = as.factor(mtcars[, 2]), alpha = 0.05)
BoxMTest(X = mtcars[, c(1, 3, 4, 5)], cl = as.factor(mtcars[, 2]), alpha = 0.05, test = "chisq")
BoxMTest(X = mtcars[, c(1, 3, 4, 5)], cl = as.factor(mtcars[, 2]), alpha = 0.05, test = "F")
BoxMTest(X = mtcars[, c(1, 3, 4, 5)], cl = as.factor(mtcars[, 2]), alpha = 0.05, test = "ChiSq")
BoxMTest(X = mtcars[, c(1, 3, 4, 5)], cl = as.factor(mtcars[, 2]), alpha = 0.05, test = NULL)
BoxMTest(X = mtcars[, c(1, 3, 4, 5)], cl = as.factor(mtcars[, 2]), alpha = 0.05, test = NULL)
BoxMTest(X = mtcars[, c(1, 3, 4, 5)], cl = as.factor(mtcars[, 2]), alpha = 0.05, test = "")
test <- NULL
test =="a"
test %in% "a"
BoxMTest(X = mtcars[, c(1, 3, 4, 5)], cl = as.factor(mtcars[, 2]), alpha = 0.05, test = "any")
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
devtools::build_manual()
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
BoxMTest
library(multiUS)
library(myPhD)
library(multiUS)
library(MASS)
lda
ldaPlus(x = mtcars[,c(1, 3, 4, 5, 6)], grouping = mtcars[,10])
lda(x = mtcars[,c(1, 3, 4, 5, 6)], grouping = mtcars[,10])
a <- lda(x = mtcars[,c(1, 3, 4, 5, 6)], grouping = mtcars[,10])
a
summary(a)
names(a)
names(ldaPlus(x = mtcars[,c(1, 3, 4, 5, 6)], grouping = mtcars[,10]))
ldaPlus(x = mtcars[,c(1, 3, 4, 5, 6)], grouping = mtcars[,10])$betweenGroupsWeights
ldaPlus(x = mtcars[,c(1, 3, 4, 5, 6)], grouping = mtcars[,10])$prior
ldaPlus(x = mtcars[,c(1, 3, 4, 5, 6)], grouping = mtcars[,10])$sigTest
ldaPlus(x = mtcars[,c(1, 3, 4, 5, 6)], grouping = mtcars[,10])$pred
ldaPlus(x = mtcars[,c(1, 3, 4, 5, 6)], grouping = mtcars[,10])$grouping
library(multiUS)
source('C:/Users/marss/Dropbox/FDV/multiUS/multiUS/R/compLoad.R')
warnings()
warnings()
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
build_manual(path=getwd())
library(devtools)
build_manual(path=getwd())
build_manual(path=getwd())
build_manual(path=getwd())
build_manual(path=getwd())
build_manual(path=getwd())
build_manual(path=getwd())
build_manual(path=getwd())
build_manual(path=getwd())
build_manual(path=getwd())
build_manual(path=getwd())
install.packages("lawstat")
